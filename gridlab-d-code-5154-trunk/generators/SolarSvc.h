#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Xml.dll>
#using <System.Web.Services.dll>
#using <System.EnterpriseServices.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace SolarSvc {
    using namespace System::Xml::Serialization;
    using namespace System::Web::Services;
    using namespace System::ComponentModel;
    using namespace System::Web::Services::Protocols;
    using namespace System;
    using namespace System::Diagnostics;
    
    using namespace System;
    ref class SolarClass;
    ref class solarcreateCompletedEventArgs;
    ref class solarinitCompletedEventArgs;
    ref class solarsyncCompletedEventArgs;
    
    
    /// <remarks/>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"wsdl", L"2.0.50727.42")]
    public delegate System::Void solarcreateCompletedEventHandler(System::Object^  sender, SolarSvc::solarcreateCompletedEventArgs^  e);
    
    /// <remarks/>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"wsdl", L"2.0.50727.42")]
    public delegate System::Void solarinitCompletedEventHandler(System::Object^  sender, SolarSvc::solarinitCompletedEventArgs^  e);
    
    /// <remarks/>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"wsdl", L"2.0.50727.42")]
    public delegate System::Void solarsyncCompletedEventHandler(System::Object^  sender, SolarSvc::solarsyncCompletedEventArgs^  e);
    
    /// <remarks/>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"wsdl", L"2.0.50727.42"), 
    System::Diagnostics::DebuggerStepThroughAttribute, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::Web::Services::WebServiceBindingAttribute(Name=L"SolarClassSoap", Namespace=L"www.inf.uth.gr/webservices/somagion_revythas/Solar")]
    public ref class SolarClass : public System::Web::Services::Protocols::SoapHttpClientProtocol {
        
        private: System::Threading::SendOrPostCallback^  solarcreateOperationCompleted;
        
        private: System::Threading::SendOrPostCallback^  solarinitOperationCompleted;
        
        private: System::Threading::SendOrPostCallback^  solarsyncOperationCompleted;
        
        /// <remarks/>
        public: event SolarSvc::solarcreateCompletedEventHandler^  solarcreateCompleted;
        
        /// <remarks/>
        public: event SolarSvc::solarinitCompletedEventHandler^  solarinitCompleted;
        
        /// <remarks/>
        public: event SolarSvc::solarsyncCompletedEventHandler^  solarsyncCompleted;
        
        /// <remarks/>
        public: SolarClass();
        /// <remarks/>
        public: [System::Web::Services::Protocols::SoapDocumentMethodAttribute(L"www.inf.uth.gr/webservices/somagion_revythas/Solar/solarcreate", 
            RequestNamespace=L"www.inf.uth.gr/webservices/somagion_revythas/Solar", ResponseNamespace=L"www.inf.uth.gr/webservices/somagion_revythas/Solar", 
            Use=System::Web::Services::Description::SoapBindingUse::Literal, ParameterStyle=System::Web::Services::Protocols::SoapParameterStyle::Wrapped)]
        System::Double solarcreate();
        
        /// <remarks/>
        public: System::IAsyncResult^  Beginsolarcreate(System::AsyncCallback^  callback, System::Object^  asyncState);
        
        /// <remarks/>
        public: System::Double Endsolarcreate(System::IAsyncResult^  asyncResult);
        
        /// <remarks/>
        public: System::Void solarcreateAsync();
        
        /// <remarks/>
        public: System::Void solarcreateAsync(System::Object^  userState);
        
        private: System::Void OnsolarcreateOperationCompleted(System::Object^  arg);
        
        /// <remarks/>
        public: [System::Web::Services::Protocols::SoapDocumentMethodAttribute(L"www.inf.uth.gr/webservices/somagion_revythas/Solar/solarinit", 
            RequestNamespace=L"www.inf.uth.gr/webservices/somagion_revythas/Solar", ResponseNamespace=L"www.inf.uth.gr/webservices/somagion_revythas/Solar", 
            Use=System::Web::Services::Description::SoapBindingUse::Literal, ParameterStyle=System::Web::Services::Protocols::SoapParameterStyle::Wrapped)]
        System::Int32 solarinit(System::Int32 gen_mode_v, System::Int32 gen_status_v, System::Int32 panel_type_v);
        
        /// <remarks/>
        public: System::IAsyncResult^  Beginsolarinit(System::Int32 gen_mode_v, System::Int32 gen_status_v, System::Int32 panel_type_v, 
                    System::AsyncCallback^  callback, System::Object^  asyncState);
        
        /// <remarks/>
        public: System::Int32 Endsolarinit(System::IAsyncResult^  asyncResult);
        
        /// <remarks/>
        public: System::Void solarinitAsync(System::Int32 gen_mode_v, System::Int32 gen_status_v, System::Int32 panel_type_v);
        
        /// <remarks/>
        public: System::Void solarinitAsync(System::Int32 gen_mode_v, System::Int32 gen_status_v, System::Int32 panel_type_v, 
                    System::Object^  userState);
        
        private: System::Void OnsolarinitOperationCompleted(System::Object^  arg);
        
        /// <remarks/>
        public: [System::Web::Services::Protocols::SoapDocumentMethodAttribute(L"www.inf.uth.gr/webservices/somagion_revythas/Solar/solarsync", 
            RequestNamespace=L"www.inf.uth.gr/webservices/somagion_revythas/Solar", ResponseNamespace=L"www.inf.uth.gr/webservices/somagion_revythas/Solar", 
            Use=System::Web::Services::Description::SoapBindingUse::Literal, ParameterStyle=System::Web::Services::Protocols::SoapParameterStyle::Wrapped)]
        System::Double solarsync(System::Int32 t0, System::Int32 t1);
        
        /// <remarks/>
        public: System::IAsyncResult^  Beginsolarsync(System::Int32 t0, System::Int32 t1, System::AsyncCallback^  callback, 
                    System::Object^  asyncState);
        
        /// <remarks/>
        public: System::Double Endsolarsync(System::IAsyncResult^  asyncResult);
        
        /// <remarks/>
        public: System::Void solarsyncAsync(System::Int32 t0, System::Int32 t1);
        
        /// <remarks/>
        public: System::Void solarsyncAsync(System::Int32 t0, System::Int32 t1, System::Object^  userState);
        
        private: System::Void OnsolarsyncOperationCompleted(System::Object^  arg);
        
        /// <remarks/>
        public: System::Void CancelAsync(System::Object^  userState) new;
    };
    
    /// <remarks/>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"wsdl", L"2.0.50727.42"), 
    System::Diagnostics::DebuggerStepThroughAttribute, 
    System::ComponentModel::DesignerCategoryAttribute(L"code")]
    public ref class solarcreateCompletedEventArgs : public System::ComponentModel::AsyncCompletedEventArgs {
        
        private: cli::array< System::Object^  >^  results;
        
        internal: solarcreateCompletedEventArgs(cli::array< System::Object^  >^  results, System::Exception^  exception, 
                    System::Boolean cancelled, System::Object^  userState);
        /// <remarks/>
        public: property System::Double Result {
            System::Double get();
        }
    };
    
    /// <remarks/>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"wsdl", L"2.0.50727.42"), 
    System::Diagnostics::DebuggerStepThroughAttribute, 
    System::ComponentModel::DesignerCategoryAttribute(L"code")]
    public ref class solarinitCompletedEventArgs : public System::ComponentModel::AsyncCompletedEventArgs {
        
        private: cli::array< System::Object^  >^  results;
        
        internal: solarinitCompletedEventArgs(cli::array< System::Object^  >^  results, System::Exception^  exception, System::Boolean cancelled, 
                    System::Object^  userState);
        /// <remarks/>
        public: property System::Int32 Result {
            System::Int32 get();
        }
    };
    
    /// <remarks/>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"wsdl", L"2.0.50727.42"), 
    System::Diagnostics::DebuggerStepThroughAttribute, 
    System::ComponentModel::DesignerCategoryAttribute(L"code")]
    public ref class solarsyncCompletedEventArgs : public System::ComponentModel::AsyncCompletedEventArgs {
        
        private: cli::array< System::Object^  >^  results;
        
        internal: solarsyncCompletedEventArgs(cli::array< System::Object^  >^  results, System::Exception^  exception, System::Boolean cancelled, 
                    System::Object^  userState);
        /// <remarks/>
        public: property System::Double Result {
            System::Double get();
        }
    };
}
namespace SolarSvc {
    
    
    inline SolarClass::SolarClass() {
        this->Url = L"http://10.96.12.51/SolarSetup/Solar.asmx";
    }
    
    inline System::Double SolarClass::solarcreate() {
        cli::array< System::Object^  >^  results = this->Invoke(L"solarcreate", gcnew cli::array< System::Object^  >(0));
        return (*cli::safe_cast<System::Double^>(results[0]));
    }
    
    inline System::IAsyncResult^  SolarClass::Beginsolarcreate(System::AsyncCallback^  callback, System::Object^  asyncState) {
        return this->BeginInvoke(L"solarcreate", gcnew cli::array< System::Object^  >(0), callback, asyncState);
    }
    
    inline System::Double SolarClass::Endsolarcreate(System::IAsyncResult^  asyncResult) {
        cli::array< System::Object^  >^  results = this->EndInvoke(asyncResult);
        return (*cli::safe_cast<System::Double^>(results[0]));
    }
    
    inline System::Void SolarClass::solarcreateAsync() {
        this->solarcreateAsync(nullptr);
    }
    
    inline System::Void SolarClass::solarcreateAsync(System::Object^  userState) {
        if (this->solarcreateOperationCompleted == nullptr) {
            this->solarcreateOperationCompleted = gcnew System::Threading::SendOrPostCallback(this, &SolarSvc::SolarClass::OnsolarcreateOperationCompleted);
        }
        this->InvokeAsync(L"solarcreate", gcnew cli::array< System::Object^  >(0), this->solarcreateOperationCompleted, userState);
    }
    
    inline System::Void SolarClass::OnsolarcreateOperationCompleted(System::Object^  arg) {
        {
            System::Web::Services::Protocols::InvokeCompletedEventArgs^  invokeArgs = (cli::safe_cast<System::Web::Services::Protocols::InvokeCompletedEventArgs^  >(arg));
            this->solarcreateCompleted(this, (gcnew SolarSvc::solarcreateCompletedEventArgs(invokeArgs->Results, invokeArgs->Error, 
                    invokeArgs->Cancelled, invokeArgs->UserState)));
        }
    }
    
    inline System::Int32 SolarClass::solarinit(System::Int32 gen_mode_v, System::Int32 gen_status_v, System::Int32 panel_type_v) {
        cli::array< System::Object^  >^  results = this->Invoke(L"solarinit", gcnew cli::array< System::Object^  >(3) {gen_mode_v, 
                gen_status_v, panel_type_v});
        return (*cli::safe_cast<System::Int32^>(results[0]));
    }
    
    inline System::IAsyncResult^  SolarClass::Beginsolarinit(System::Int32 gen_mode_v, System::Int32 gen_status_v, System::Int32 panel_type_v, 
                System::AsyncCallback^  callback, System::Object^  asyncState) {
        return this->BeginInvoke(L"solarinit", gcnew cli::array< System::Object^  >(3) {gen_mode_v, gen_status_v, panel_type_v}, 
            callback, asyncState);
    }
    
    inline System::Int32 SolarClass::Endsolarinit(System::IAsyncResult^  asyncResult) {
        cli::array< System::Object^  >^  results = this->EndInvoke(asyncResult);
        return (*cli::safe_cast<System::Int32^>(results[0]));
    }
    
    inline System::Void SolarClass::solarinitAsync(System::Int32 gen_mode_v, System::Int32 gen_status_v, System::Int32 panel_type_v) {
        this->solarinitAsync(gen_mode_v, gen_status_v, panel_type_v, nullptr);
    }
    
    inline System::Void SolarClass::solarinitAsync(System::Int32 gen_mode_v, System::Int32 gen_status_v, System::Int32 panel_type_v, 
                System::Object^  userState) {
        if (this->solarinitOperationCompleted == nullptr) {
            this->solarinitOperationCompleted = gcnew System::Threading::SendOrPostCallback(this, &SolarSvc::SolarClass::OnsolarinitOperationCompleted);
        }
        this->InvokeAsync(L"solarinit", gcnew cli::array< System::Object^  >(3) {gen_mode_v, gen_status_v, panel_type_v}, this->solarinitOperationCompleted, 
            userState);
    }
    
    inline System::Void SolarClass::OnsolarinitOperationCompleted(System::Object^  arg) {
        {
            System::Web::Services::Protocols::InvokeCompletedEventArgs^  invokeArgs = (cli::safe_cast<System::Web::Services::Protocols::InvokeCompletedEventArgs^  >(arg));
            this->solarinitCompleted(this, (gcnew SolarSvc::solarinitCompletedEventArgs(invokeArgs->Results, invokeArgs->Error, 
                    invokeArgs->Cancelled, invokeArgs->UserState)));
        }
    }
    
    inline System::Double SolarClass::solarsync(System::Int32 t0, System::Int32 t1) {
        cli::array< System::Object^  >^  results = this->Invoke(L"solarsync", gcnew cli::array< System::Object^  >(2) {t0, 
                t1});
        return (*cli::safe_cast<System::Double^>(results[0]));
    }
    
    inline System::IAsyncResult^  SolarClass::Beginsolarsync(System::Int32 t0, System::Int32 t1, System::AsyncCallback^  callback, 
                System::Object^  asyncState) {
        return this->BeginInvoke(L"solarsync", gcnew cli::array< System::Object^  >(2) {t0, t1}, callback, asyncState);
    }
    
    inline System::Double SolarClass::Endsolarsync(System::IAsyncResult^  asyncResult) {
        cli::array< System::Object^  >^  results = this->EndInvoke(asyncResult);
        return (*cli::safe_cast<System::Double^>(results[0]));
    }
    
    inline System::Void SolarClass::solarsyncAsync(System::Int32 t0, System::Int32 t1) {
        this->solarsyncAsync(t0, t1, nullptr);
    }
    
    inline System::Void SolarClass::solarsyncAsync(System::Int32 t0, System::Int32 t1, System::Object^  userState) {
        if (this->solarsyncOperationCompleted == nullptr) {
            this->solarsyncOperationCompleted = gcnew System::Threading::SendOrPostCallback(this, &SolarSvc::SolarClass::OnsolarsyncOperationCompleted);
        }
        this->InvokeAsync(L"solarsync", gcnew cli::array< System::Object^  >(2) {t0, t1}, this->solarsyncOperationCompleted, 
            userState);
    }
    
    inline System::Void SolarClass::OnsolarsyncOperationCompleted(System::Object^  arg) {
        {
            System::Web::Services::Protocols::InvokeCompletedEventArgs^  invokeArgs = (cli::safe_cast<System::Web::Services::Protocols::InvokeCompletedEventArgs^  >(arg));
            this->solarsyncCompleted(this, (gcnew SolarSvc::solarsyncCompletedEventArgs(invokeArgs->Results, invokeArgs->Error, 
                    invokeArgs->Cancelled, invokeArgs->UserState)));
        }
    }
    
    inline System::Void SolarClass::CancelAsync(System::Object^  userState) {
        __super::CancelAsync(userState);
    }
    
    
    inline solarcreateCompletedEventArgs::solarcreateCompletedEventArgs(cli::array< System::Object^  >^  results, System::Exception^  exception, 
                System::Boolean cancelled, System::Object^  userState) : 
            System::ComponentModel::AsyncCompletedEventArgs(exception, cancelled, userState) {
        this->results = results;
    }
    
    inline System::Double solarcreateCompletedEventArgs::Result::get() {
        this->RaiseExceptionIfNecessary();
        return (*cli::safe_cast<System::Double^>(this->results[0]));
    }
    
    
    inline solarinitCompletedEventArgs::solarinitCompletedEventArgs(cli::array< System::Object^  >^  results, System::Exception^  exception, 
                System::Boolean cancelled, System::Object^  userState) : 
            System::ComponentModel::AsyncCompletedEventArgs(exception, cancelled, userState) {
        this->results = results;
    }
    
    inline System::Int32 solarinitCompletedEventArgs::Result::get() {
        this->RaiseExceptionIfNecessary();
        return (*cli::safe_cast<System::Int32^>(this->results[0]));
    }
    
    
    inline solarsyncCompletedEventArgs::solarsyncCompletedEventArgs(cli::array< System::Object^  >^  results, System::Exception^  exception, 
                System::Boolean cancelled, System::Object^  userState) : 
            System::ComponentModel::AsyncCompletedEventArgs(exception, cancelled, userState) {
        this->results = results;
    }
    
    inline System::Double solarsyncCompletedEventArgs::Result::get() {
        this->RaiseExceptionIfNecessary();
        return (*cli::safe_cast<System::Double^>(this->results[0]));
    }
}
